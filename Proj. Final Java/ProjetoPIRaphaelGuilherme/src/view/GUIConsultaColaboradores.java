/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package view;

import dao.ColaboradoresDAO;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.table.DefaultTableModel;
import model.EmpresaVO;
import model.PessoaFisicaVO;
import static view.GUIPrincipal.jdpAreaDeTrabalho;

/**
 *
 * @author Admin
 */
public class GUIConsultaColaboradores extends javax.swing.JInternalFrame implements InternalFrameListener {

    /**
     * Creates new form GUIConsultaColaboradores
     */
    public GUIConsultaColaboradores() {
        initComponents();
        jtbConsultaEmpresa.setModel(dtmEmpresas);
        jtbConsultaPessoaFisica.setModel(dtmPessoaFisica);
        preencherTabelaEmpresa();
        preencherTabelaPessoaFisica();
    }
    DefaultTableModel dtmEmpresas = new DefaultTableModel(
            new Object[][]{},
            new Object[]{"ID", "CNPJ", "Nome Fantasia", "Responsável", "Telefone Empresa", "Telefone Responsável", "E-mail Empresa", "E-mail Responsável", "Cargo", "Cadastro"}
    );
    DefaultTableModel dtmPessoaFisica = new DefaultTableModel(
            new Object[][]{},
            new Object[]{"ID", "CPF", "Nome Completo", "Email", "Endereço", "CEP", "Telefone", "Data"}
    );

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtbConsultas = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jpnConsulta = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jtfPesquisaPessoaFisica = new javax.swing.JTextField();
        jbtPesquisaPessoaFisica = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbConsultaPessoaFisica = new javax.swing.JTable();
        jcbPesquisapessoaFisica = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jpnConsulta1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jtfPesquisaEmpresa = new javax.swing.JTextField();
        jbtAlterarEmpresa = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbConsultaEmpresa = new javax.swing.JTable();
        jcbPesquisaEmpresa = new javax.swing.JComboBox<>();

        setClosable(true);
        setIconifiable(true);

        jLabel5.setText("Pesquisar Pessoa Física");

        jtfPesquisaPessoaFisica.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfPesquisaPessoaFisicaKeyReleased(evt);
            }
        });

        jbtPesquisaPessoaFisica.setText("Alterar");
        jbtPesquisaPessoaFisica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPesquisaPessoaFisicaActionPerformed(evt);
            }
        });

        jtbConsultaPessoaFisica.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbConsultaPessoaFisica.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbConsultaPessoaFisicaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtbConsultaPessoaFisica);

        jcbPesquisapessoaFisica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID do Usuário", "CPF", "Login", "Nome", "Sobrenome", "Perfil", "E-mail", "Data" }));

        javax.swing.GroupLayout jpnConsultaLayout = new javax.swing.GroupLayout(jpnConsulta);
        jpnConsulta.setLayout(jpnConsultaLayout);
        jpnConsultaLayout.setHorizontalGroup(
            jpnConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jpnConsultaLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jtfPesquisaPessoaFisica, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jcbPesquisapessoaFisica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbtPesquisaPessoaFisica)
                .addContainerGap(944, Short.MAX_VALUE))
        );
        jpnConsultaLayout.setVerticalGroup(
            jpnConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnConsultaLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jpnConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jcbPesquisapessoaFisica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbtPesquisaPessoaFisica))
                    .addGroup(jpnConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jtfPesquisaPessoaFisica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(175, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1591, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jpnConsulta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 529, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jpnConsulta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jtbConsultas.addTab("Pessoa Física", jPanel1);

        jLabel6.setText("Pesquisar Empresa");

        jtfPesquisaEmpresa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfPesquisaEmpresaKeyReleased(evt);
            }
        });

        jbtAlterarEmpresa.setText("Alterar");
        jbtAlterarEmpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAlterarEmpresaActionPerformed(evt);
            }
        });

        jtbConsultaEmpresa.setAutoCreateRowSorter(true);
        jtbConsultaEmpresa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbConsultaEmpresa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbConsultaEmpresaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtbConsultaEmpresa);

        jcbPesquisaEmpresa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID Empresa", "CNPJ", "Nome Fantasia", "Responsável", "Telefone Empresa", "Telefone Responsável", "E-mail Empresa", "E-mail Responsável", "Cargo", "Data de Cadastro" }));

        javax.swing.GroupLayout jpnConsulta1Layout = new javax.swing.GroupLayout(jpnConsulta1);
        jpnConsulta1.setLayout(jpnConsulta1Layout);
        jpnConsulta1Layout.setHorizontalGroup(
            jpnConsulta1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnConsulta1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jtfPesquisaEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jcbPesquisaEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbtAlterarEmpresa)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jpnConsulta1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1591, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jpnConsulta1Layout.setVerticalGroup(
            jpnConsulta1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnConsulta1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jpnConsulta1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnConsulta1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jcbPesquisaEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbtAlterarEmpresa))
                    .addGroup(jpnConsulta1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jtfPesquisaEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(149, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1591, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(jpnConsulta1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 529, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(jpnConsulta1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jtbConsultas.addTab("Empresas", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtbConsultas)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtbConsultas, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void filtrarPessoaFisica() {
        try {
            if (jtfPesquisaPessoaFisica.getText().isEmpty()) {
                limparTela();
                preencherTabelaPessoaFisica();
            } else {
                String opcao = null, pesquisa = null;

                switch (jcbPesquisapessoaFisica.getSelectedItem().toString()) {
                    case "ID do Usuário":
                        opcao = "pessoaFisica_id";
                        break;
                    case "CPF":
                        opcao = "cpf";
                        break;
                    case "Nome":
                        opcao = "nome";
                        break;
                    case "Sobrenome":
                        opcao = "sobrenome";
                        break;
                    case "Email":
                        opcao = "email";
                        break;
                    case "Endereço":
                        opcao = "endereco";
                        break;
                    case "CEP":
                        opcao = "cep";
                        break;
                    case "Telefone":
                        opcao = "telefone";
                        break;
                    case "Data":
                        opcao = "data_cadastro";
                        break;
                }
                pesquisa = jtfPesquisaPessoaFisica.getText();

                ColaboradoresDAO cDAO = new ColaboradoresDAO();

                ArrayList<PessoaFisicaVO> pessoas = new ArrayList<>();

                pessoas = cDAO.filtrarTabelaPessoaFisica(opcao, pesquisa);

                for (int i = 0; i < pessoas.size(); i++) {
                    dtmPessoaFisica.addRow(new String[]{
                        String.valueOf(pessoas.get(i).getIdPF()),
                        String.valueOf(pessoas.get(i).getCPF()),
                        String.valueOf(pessoas.get(i).getNomeCompleto()),
                        String.valueOf(pessoas.get(i).getEmailPF()),
                        String.valueOf(pessoas.get(i).getEndereco()),
                        String.valueOf(pessoas.get(i).getCep()),
                        String.valueOf(pessoas.get(i).getTelefonePF()),
                        String.valueOf(pessoas.get(i).getDataFormatada()),});
                }

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao filtrar pessoa!");
        }
    }

    public void preencherTabelaPessoaFisica() {
        try {
            ColaboradoresDAO cDAO = new ColaboradoresDAO();

            ArrayList<PessoaFisicaVO> pessoas = new ArrayList<>();

            pessoas = cDAO.preencherTabelaPessaoFisica();

            for (int i = 0; i < pessoas.size(); i++) {
                dtmPessoaFisica.addRow(new String[]{
                    String.valueOf(pessoas.get(i).getIdPF()),
                    String.valueOf(pessoas.get(i).getCPF()),
                    String.valueOf(pessoas.get(i).getNomeCompleto()),
                    String.valueOf(pessoas.get(i).getEmailPF()),
                    String.valueOf(pessoas.get(i).getEndereco()),
                    String.valueOf(pessoas.get(i).getCep()),
                    String.valueOf(pessoas.get(i).getTelefonePF()),
                    String.valueOf(pessoas.get(i).getDataFormatada()),});
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "ERRO ao preencher tabela Pessoa Física");
        }
    }

    public void filtrarEmpresa() {
        try {
            if (jtfPesquisaEmpresa.getText().isEmpty()) {
                limparTela();
                preencherTabelaEmpresa();
            } else {
                String opcao = null, pesquisa = null;
                switch (jcbPesquisaEmpresa.getSelectedItem().toString()) {
                    case "ID Empresa":
                        opcao = "empresa_id";
                        break;
                    case "CNPJ":
                        opcao = "cnpj";
                        break;
                    case "Nome Fantasia":
                        opcao = "nome_empresa";
                        break;
                    case "Responsável":
                        opcao = "nome_responsavel";
                        break;
                    case "Telefone Empresa":
                        opcao = "telefone_empresa";
                        break;
                    case "Telefone Responsável":
                        opcao = "telefone_responsavel";
                        break;
                    case "E-mail Empresa":
                        opcao = "email_empresa";
                        break;
                    case "E-mail Responsável":
                        opcao = "email_responsavel";
                        break;
                    case "Cargo":
                        opcao = "cargo";
                        break;
                    case "Data":
                        opcao = "data_cadastro";
                        break;
                }
                pesquisa = jtfPesquisaEmpresa.getText();

                ColaboradoresDAO cDAO = new ColaboradoresDAO();

                ArrayList<EmpresaVO> empresas = new ArrayList<>();

                empresas = cDAO.filtrarTabelaEmpresa(opcao, pesquisa);

                for (int i = 0; i < empresas.size(); i++) {
                    dtmEmpresas.addRow(new String[]{
                        String.valueOf(empresas.get(i).getIdEmpresa()),
                        String.valueOf(empresas.get(i).getCNPJ()),
                        String.valueOf(empresas.get(i).getNomeEmpresa()),
                        String.valueOf(empresas.get(i).getResponsavelEmpresa()),
                        String.valueOf(empresas.get(i).getTelefoneEmpresa()),
                        String.valueOf(empresas.get(i).getTelefoneResponsavel()),
                        String.valueOf(empresas.get(i).getEmailEmpresa()),
                        String.valueOf(empresas.get(i).getEmailResponsavel()),
                        String.valueOf(empresas.get(i).getCargoEmpresa()),
                        String.valueOf(empresas.get(i).getDataFormatada()),});
                }
            }
        } catch (Exception e) {
        }
    }

    public void preencherTabelaEmpresa() {
        try {
            ColaboradoresDAO cDAO = new ColaboradoresDAO();

            ArrayList<EmpresaVO> empresas = new ArrayList<>();

            empresas = cDAO.preencherTabelaEmpresa();

            for (int i = 0; i < empresas.size(); i++) {
                dtmEmpresas.addRow(new String[]{
                    String.valueOf(empresas.get(i).getIdEmpresa()),
                    String.valueOf(empresas.get(i).getCNPJ()),
                    String.valueOf(empresas.get(i).getNomeEmpresa()),
                    String.valueOf(empresas.get(i).getResponsavelEmpresa()),
                    String.valueOf(empresas.get(i).getTelefoneEmpresa()),
                    String.valueOf(empresas.get(i).getTelefoneResponsavel()),
                    String.valueOf(empresas.get(i).getEmailEmpresa()),
                    String.valueOf(empresas.get(i).getEmailResponsavel()),
                    String.valueOf(empresas.get(i).getCargoEmpresa()),
                    String.valueOf(empresas.get(i).getDataFormatada()),});
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "ERRO ao preencher Tabela Empresa" + e.getMessage());
        }
    }

    public void limparTela() {
        if (jtbConsultas.getSelectedIndex() == 1) {
            dtmEmpresas.setNumRows(0);
        } else {
            dtmPessoaFisica.setNumRows(0);
        }
    }
    private void jtfPesquisaPessoaFisicaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPesquisaPessoaFisicaKeyReleased
        limparTela();
        filtrarPessoaFisica();
    }//GEN-LAST:event_jtfPesquisaPessoaFisicaKeyReleased

    private void jtfPesquisaEmpresaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPesquisaEmpresaKeyReleased
        limparTela();
        filtrarEmpresa();
    }//GEN-LAST:event_jtfPesquisaEmpresaKeyReleased

    private void jbtAlterarEmpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAlterarEmpresaActionPerformed
        if (jtbConsultaEmpresa.getSelectedRow() == -1) {

            JOptionPane.showMessageDialog(null, "Nenhuma Pessoa selecionada!");

        } else {

            GUIConsultaCadEmpresa gcce = new GUIConsultaCadEmpresa();

            abrirGUIConsultaCadEmpresa();

            gcce.preencherCamposConsultaCad(cnpjAtual);
        }

    }//GEN-LAST:event_jbtAlterarEmpresaActionPerformed
   
    private void jtbConsultaEmpresaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbConsultaEmpresaMouseClicked
        selecionarLinhaEmpresas();
    }//GEN-LAST:event_jtbConsultaEmpresaMouseClicked

    private void jtbConsultaPessoaFisicaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbConsultaPessoaFisicaMouseClicked
        selecionarLinhaPessoaFisica();
    }//GEN-LAST:event_jtbConsultaPessoaFisicaMouseClicked

    private void jbtPesquisaPessoaFisicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPesquisaPessoaFisicaActionPerformed
        if (jtbConsultaPessoaFisica.getSelectedRow() == -1) {

            JOptionPane.showMessageDialog(null, "Nenhuma Pessoa selecionada!");

        } else {

            GUIConsultaCadPessoaFisica gccpf = new GUIConsultaCadPessoaFisica();

            abrirGUIConsultaCadPF();

            gccpf.preencherCampos(cpfAtual);
        }
    }//GEN-LAST:event_jbtPesquisaPessoaFisicaActionPerformed
    private String cnpjAtual;

    public void selecionarLinhaEmpresas() {

        String cnpj = jtbConsultaEmpresa.getValueAt(jtbConsultaEmpresa.getSelectedRow(), 1).toString();

        this.cnpjAtual = cnpj;

    }

    private String cpfAtual;

    public void selecionarLinhaPessoaFisica() {

        String cpf = jtbConsultaPessoaFisica.getValueAt(jtbConsultaPessoaFisica.getSelectedRow(), 1).toString();

        this.cpfAtual = cpf;

    }

    public void abrirGUIConsultaCadPF() {

        GUIConsultaCadPessoaFisica gcpf = new GUIConsultaCadPessoaFisica();

        jdpAreaDeTrabalho.add(gcpf);

        gcpf.setVisible(true);

        gcpf.addInternalFrameListener(this);

    }

    public void abrirGUIConsultaCadEmpresa() {

        GUIConsultaCadEmpresa gce = new GUIConsultaCadEmpresa();

        jdpAreaDeTrabalho.add(gce);

        gce.setVisible(true);

        gce.addInternalFrameListener(this);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtAlterarEmpresa;
    private javax.swing.JButton jbtPesquisaPessoaFisica;
    private javax.swing.JComboBox<String> jcbPesquisaEmpresa;
    private javax.swing.JComboBox<String> jcbPesquisapessoaFisica;
    private javax.swing.JPanel jpnConsulta;
    private javax.swing.JPanel jpnConsulta1;
    private javax.swing.JTable jtbConsultaEmpresa;
    private javax.swing.JTable jtbConsultaPessoaFisica;
    private javax.swing.JTabbedPane jtbConsultas;
    private javax.swing.JTextField jtfPesquisaEmpresa;
    private javax.swing.JTextField jtfPesquisaPessoaFisica;
    // End of variables declaration//GEN-END:variables

    @Override
    public void internalFrameOpened(InternalFrameEvent ife) {
    }

    @Override
    public void internalFrameClosing(InternalFrameEvent ife) {
    }

    @Override
    public void internalFrameClosed(InternalFrameEvent ife) {
    }

    @Override
    public void internalFrameIconified(InternalFrameEvent ife) {
    }

    @Override
    public void internalFrameDeiconified(InternalFrameEvent ife) {
    }

    @Override
    public void internalFrameActivated(InternalFrameEvent ife) {
    }

    @Override
    public void internalFrameDeactivated(InternalFrameEvent ife) {
    }
}
